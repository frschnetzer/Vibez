@using Vibez.Data.Service

@inject IFriendService FriendService
@inject IEventService EventService

@if(IsShown)
{
    <div class="modal show" role="dialog" style="display:block">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h2 class="modal-title">Warning!</h2>
                </div>
                <div class="modal-body">
                    <p style="font-size: 15px">Are you sure to delete?</p>
                    <div style="text-align:end">
                        <button class="btn btn-danger" @onclick="SubmitDeleteClick">Delete</button>
                        <button class="btn btn-secondary" @onclick="CancelDelete">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@if(ErrorMessage != null)
{
    <div style="padding-top:20px">
        <div class="alert alert-danger" role="alert">
            @ErrorMessage
        </div>
    </div>
}
@code {
    [Parameter]
    public EventCallback CloseCallback { get; set; }
    [Parameter]
    public bool IsShown { get; set; } = false;
    [Parameter]
    public int? SelectedFriendId { get; set; }
    [Parameter]
    public int? SelectedEventId { get; set; }

    private string? ErrorMessage = null;

    private async Task SubmitDeleteClick()
    {
        try
        {
            if(SelectedFriendId != null)
            {
                await FriendService.RemoveFriendById((int)SelectedFriendId);
            }

            if(SelectedEventId != null)
            {
                await EventService.DeleteEventById((int)SelectedEventId);
            }

            await CloseCallback.InvokeAsync();

        }
        catch(Exception ex)
        {
            ErrorMessage = ex.Message;
            StateHasChanged();

            await Task.Delay(3000);

            ErrorMessage = null;
            StateHasChanged();
        }
    }

    private async Task CancelDelete()
    {
        await CloseCallback.InvokeAsync();
    }
}