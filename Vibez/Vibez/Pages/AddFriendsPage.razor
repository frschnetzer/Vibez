@page "/addfriends"
@using Microsoft.AspNetCore.Identity
@using Vibez.Data.Models
@using Vibez.Data.Service
@inject IFriendService FriendService
@inject AuthenticationStateProvider AuthProvider
@inject IApplicationUserService ApplicationUserService

<h3>Add a Friend</h3>

<div class="form-row">
    <div class="form-group row">
        <div class="form-group col-md-4">
            <input type="text" class="form-control" @bind="username" placeholder="Search friend" />
        </div>
        <div class="form-group col">
            <button @onclick="SearchUser" class="btn btn-primary">Search</button>
        </div>
    </div>
    <br />
    <button @onclick="CreateFriend" class="btn btn-primary">Add</button>
</div>
<br />
<br />
<label class="form-label" style="font-size: 20px">Your friends:</label>
<table class="table">
    <thead class="thead-dark">
        <tr>
            <th scope="col">Username</th>
            <th scope="col">Email</th>
        </tr>
    </thead>
    <tbody>
        @if (friendList != null)
        {

            @foreach (var friend in friendList)
            {
                <tr>
                    <td>@friend.ApplicationUser.UserName</td>
                    <td>@friend.ApplicationUser.Email</td>
                    <td align="right">
                        <button class="btn btn-primary" @onclick="() => DeleteFriend(friend.FriendId)">
                            Delete
                        </button>
                    </td>
                </tr>
            }
        }
        else
        {
            <h3>You have not added friends now!</h3>
            <a href="@("/inviteFriends")">Get new friends now :)</a>
        }
    </tbody>
</table>

@code {
    private ApplicationUser? currentUser;
    private ApplicationUser? searchedIdentityUser;
    private List<Friend>? friendList;
    private string username { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var email = (await AuthProvider.GetAuthenticationStateAsync()).User.Identity.Name;
        currentUser = await ApplicationUserService.GetApplicationUserByEmail(email);

        //friendList = await FriendService.GetAllFriendsByUser(currentUser);
    }

    private async void SearchUser()
    {
        searchedIdentityUser = await ApplicationUserService.GetApplicationUserByEmail(username);
    }

    private async void CreateFriend()
    {
        await FriendService.AddFriend(currentUser, searchedIdentityUser);
    }

    private async void DeleteFriend(int friendId)
    {
        //await FriendService.RemoveFriend(friendId);
    }
}
