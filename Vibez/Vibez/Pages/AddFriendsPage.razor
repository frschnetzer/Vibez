@page "/addfriends"

@using Microsoft.AspNetCore.Identity
@using Vibez.Data.Models
@using Vibez.Data.Service

@inject AuthenticationStateProvider AuthProvider
@inject IApplicationUserService ApplicationUserService
@inject IFriendService FriendService

<style>
    .button {
        background-color: #8c74ac;
        color: white;
        border: none;
        border-radius: 5px !important;
        cursor: pointer;
    }
</style>

<h1>Add a Friend</h1>

<div class="form-row">
    <div class="form-group row">
        <div class="form-group col-md-4">
            <input type="text" class="form-control" list="datalistOptions" id="exampleDataList" placeholder="Type to search..." @onchange="@((args) => SelectedPerson = args.Value.ToString())">
            <datalist id="datalistOptions">
                @foreach(var item in allUsers)
                {
                    <option value=@item.UserName></option>
                }
            </datalist>
        </div>
        <div class="form-group col">
            <button @onclick="CreateFriend" class="btn button">Add</button>
        </div>
    </div>
    <br />
    <br />
    <br />
    <label class="form-label" style="font-size: 30px">Your friends</label>
    <table class="table table-hover">
        <thead class="thead-dark">
            <tr>
                <th scope="col">You</th>
                <th scope="col">Friend</th>
            </tr>
        </thead>
        <tbody>
            @if(friendList != null)
            {
                @foreach(var friend in friendList)
                {
                    <tr>
                        <td>@friend.ApplicationUser.UserName</td>
                        <td>@friend.FriendEmail</td>
                        <td align="right">
                            <button class="btn btn-secondary" @onclick="() => DeleteFriend(friend.FriendId)">
                                Delete
                            </button>
                        </td>
                    </tr>
                }
            }
            else
            {
                <h3>You have not added friends now!</h3>

                <p>Get new friends now :)</p>
            }
        </tbody>
    </table>
</div>

@if(ErrorMessage != null)
{
    <div style="padding-top:20px">
        <div class="alert alert-danger" role="alert">
            @ErrorMessage
        </div>
    </div>
}

@if(SuccessMessage != null)
{
    <div style="padding-top:20px">
        <div class="alert alert-success" role="alert">
            @SuccessMessage
        </div>
    </div>
}

<DeleteWarningModalPage CloseCallback="ModalCloseCallback" IsShown=@isShown SelectedEventId="null" SelectedFriendId="@selectedFriendId" />

@code {
    private ApplicationUser? currentUser;
    private ApplicationUser? searchedIdentityUser;

    private List<Friend>? friendList;
    private List<ApplicationUser> allUsers = new();

    private string username { get; set; } = string.Empty;
    private string SelectedPerson;
    private bool isShown = false;
    private int? selectedFriendId;

    private string? ErrorMessage = null;
    private string? SuccessMessage = null;

    /// <summary>
    /// Gets called on render
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        try
        {
            var email = (await AuthProvider.GetAuthenticationStateAsync()).User.Identity.Name;
            currentUser = await ApplicationUserService.GetApplicationUserByEmail(email);

            friendList = await FriendService.GetAllFriendsByUser(currentUser);
            allUsers = await FriendService.GetAllNonFriends(currentUser);
        }
        catch(Exception ex)
        {
            ErrorMessage = ex.Message;
            StateHasChanged();

            await Task.Delay(3000);

            ErrorMessage = null;
            StateHasChanged();
        }
    }

    /// <summary>
    /// Adds selected ApplicationUser to friendlist of authorized user
    /// </summary>
    /// <returns>Asynchronous Task</returns>
    private async Task CreateFriend()
    {
        try
        {
            searchedIdentityUser = await ApplicationUserService.GetApplicationUserByEmail(SelectedPerson);
            await FriendService.AddFriend(currentUser, searchedIdentityUser);

            await RefreshData();
            StateHasChanged();
        }
        catch(Exception ex)
        {
            ErrorMessage = ex.Message;
            StateHasChanged();

            await Task.Delay(3000);

            ErrorMessage = null;
            StateHasChanged();
        }
    }

    /// <summary>
    /// Deletes selected friend of friendlist of authorized user
    /// </summary>
    /// <param name="friendId">Selected friend id</param>
    /// <returns>Asynchronous Task</returns>
    private async Task DeleteFriend(int friendId)
    {
        isShown = true;
        selectedFriendId = friendId;

        try
        {
            await RefreshData();
            StateHasChanged();
        }
        catch(Exception ex)
        {
            ErrorMessage = ex.Message;
            StateHasChanged();

            await Task.Delay(3000);

            ErrorMessage = null;
            StateHasChanged();
        }
    }

    /// <summary>
    /// Refreshes friendslist
    /// </summary>
    /// <returns>Asynchronous Task</returns>
    private async Task RefreshData()
    {
        try
        {
            friendList = await FriendService.GetAllFriendsByUser(currentUser);
            allUsers = await FriendService.GetAllNonFriends(currentUser);

            StateHasChanged();
        }
        catch(Exception ex)
        {
            ErrorMessage = ex.Message;
            StateHasChanged();

            await Task.Delay(3000);

            ErrorMessage = null;
            StateHasChanged();
        }
    }

    /// <summary>
    /// Gets called on modal closed
    /// </summary>
    private async void ModalCloseCallback()
    {
        isShown = false;
        selectedFriendId = null;

        await RefreshData();
        StateHasChanged();
    }
}
