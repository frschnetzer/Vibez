@page "/createparty"

@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Mvc.Rendering
@using Vibez.Data.Models
@using Vibez.Data.Service

@inject IEventService EventService
@inject IApplicationUserService ApplicationUserService
@inject AuthenticationStateProvider AuthProvider
@inject IFriendService FriendService
@inject IEmailService EmailService

<PageTitle>Create Party</PageTitle>

<div class="container">
    <div class="row gx-2">
        <div class="col-md-6">

            <h3>Create a party</h3>

            <div class="input-group mb-3 w-75">
                <input @bind="eventname" type="text" class="form-control" placeholder="Eventname" />
            </div>
            <div class="input-group mb-3 w-75">
                <input @bind="notes" type="text" class="form-control" placeholder="Notes" />
            </div>
            <div class="input-group mb-3 w-75">
                <input @bind="street" @onkeydown="GenerateMapUrl" type="text" class="form-control" placeholder="Street" />
            </div>
            <div class="input-group mb-3 w-75">
                <input @bind="postcode" @onkeydown="GenerateMapUrl" type="text" class="form-control" placeholder="Zipcode" />
            </div>
            <div class="input-group mb-3 w-75">
                <input @bind="city" @onkeydown="GenerateMapUrl" type="text" class="form-control" placeholder="City" />
            </div>
            <div class="input-group mb-3 w-50">
                <input type="date" @bind="date" class="form-control" />
                <input type="time" @bind="time" class="form-control" />
            </div>
            <div class="input-group mb-3 w-75">
                @if (friendsList == null || friendsList.Count == 0)
                {
                    <h3>Validation</h3>
                }
                else
                {
                    @if (friendsList.Any())
                    {
                        <select class="form-select" multiple aria-label="multiple select example" @onchange="OnProjectSelectionChange">
                            <option selected>Select Friends</option>
                            @foreach (var friend in friendsList)
                            {
                                <option value="@friend.FriendEmail">@friend.FriendEmail</option>
                            }
                        </select>
                    }
                }
            </div>
            <div class="input-group mb-3 w-30" style="margin-top: 20px;">
                <button @onclick="CreateEvent">Create Event</button>
            </div>
        </div>
        <div class="col-md-6">
            <div class="input-group mb-3">
                <iframe frameborder="0" scrolling="no" marginheight="0" marginwidth="0" id="gmap_canvas" src="@mapUrl" width="600" height="400">
                </iframe>
            </div>

        </div>
    </div>
</div>

@code {
    private List<string> selectedFriends;
    private List<Friend>? friendsList;
    private Event? newEvent;
    private ApplicationUser? appUser;
    private List<ApplicationUser> appUserList = new List<ApplicationUser>();
    private DateTime date { get; set; }
    private TimeOnly time { get; set; }
    private string eventname { get; set; } = string.Empty;
    private string notes { get; set; } = string.Empty;
    private string location { get; set; } = string.Empty;
    private string street = string.Empty;
    private string postcode = string.Empty;
    private string city = string.Empty;
    private int friendId { get; set; }
    private string mapUrl = "https://maps.google.com/maps?q=&t=h&z=3&output=embed";

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var email = (await AuthProvider.GetAuthenticationStateAsync()).User.Identity.Name;

        appUser = await ApplicationUserService.GetApplicationUserByEmail(email);

        friendsList = await FriendService.GetAllFriendsByUser(appUser);
    }

    private async void OnProjectSelectionChange(ChangeEventArgs e)
    {
        if (e.Value is not null)
        {
            selectedFriends = ((string[])e.Value).ToList();
        }
    }

    public async void CreateEvent()
    {
        foreach(var friend in selectedFriends)
        {
            ApplicationUser _friend = await ApplicationUserService.GetApplicationUserByEmail(friend);
            appUserList.Add(_friend);
        }

        var _newEvent = new Event()
            {
                EventName = eventname,
                CreatorName = appUser.ToString(),
                Notes = notes,
                Date = date,
                EventTime = Convert.ToString(time),
                ParticipantCount = appUserList.Count,
                Postcode = postcode,
                City = city,
                Address = street,
                ApplicationUsers = appUserList
            };

        await EventService.AddEvent(_newEvent);

        foreach (var friend in _newEvent.ApplicationUsers)
        {
            await EmailService.SendEmailAsync(friend.Email, _newEvent.CreatorName);
        }
    }

    private void GenerateMapUrl()
    {
        if (!string.IsNullOrEmpty(street) || !string.IsNullOrEmpty(postcode) || !string.IsNullOrEmpty(city))
        {
            string address = $"{street}, {postcode} {city}";
            string encodedAddress = Uri.EscapeUriString(address);
            mapUrl = $"https://maps.google.com/maps?q={encodedAddress}&t=h&z=20&output=embed";
        }
    }
}
