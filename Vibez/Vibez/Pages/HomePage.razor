@page "/homePage"

@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using Vibez.Data.Models
@using Vibez.Data.Service

@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject IEventService eventService
@inject IApplicationUserService applicaionUserService

<h3>Vibezz</h3>

@*style defining*@
<style>
    .header {
        background-color: #f0f0f0;
        padding: 10px;
        text-align: center;
        border-bottom: 2px solid #ddd;
    }

    .button-row {
        display: flex;
        width: 100%;
        text-align: center;
        margin-bottom: 20px;
    }

    .button {
        padding: 10px;
        background-color: #8c74ac;
        color: white;
        border: none;
        border-radius: 5px !important;
        cursor: pointer;
        margin: 20px !important;
    }

        .button:hover {
            background-color: #dcc4e4;
            transition: 0.7s;
        }
</style>

@if(!isAuthenticated)
{
    <div>
        <p>Please sign in or register to use the application!</p>
    </div>
}
else
{
    <div class="header">
        <div class="button-row">
            <div class="btn-group" role="group" aria-label="Basic radio toggle button group">
                <input type="radio" class="btn-check" autocomplete="off" checked>
                <label class="btn button" for="btnradio1" @onclick=GetAllEventsAsync>All events</label>

                <input type="radio" class="btn-check" autocomplete="off">
                <label class="btn button" for="btnradio2" @onclick=GetAllUpcomingEventsAsync>Upcoming</label>

                <input type="radio" class="btn-check" autocomplete="off">
                <label class="btn button" for="btnradio3" @onclick=GetAllPastEventsAsync>Past</label>
            </div>
        </div>
    </div>

    <div>
        @foreach(var item in eventlist)
        {
            <div class="card">
                <div class="card-header">
                    @item.EventName
                </div>
                <div class="card-body">
                    <p class="card-text">@item.Notes</p>
                    <a href="#" class="btn btn-primary">Go somewhere</a>
                </div>
            </div>
        }

    </div>
}

@code {
    private List<Event> eventlist = new();
    private AuthenticationState? authstate;
    private Event? newEvent;

    private IdentityUser currentUser;

    private bool isAuthenticated;

    protected override async Task OnInitializedAsync()
    {
        authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        isAuthenticated = authstate.User.Identity.IsAuthenticated;

        try
        {
            if(isAuthenticated)
            {
                currentUser = await applicaionUserService.GetApplicationUserByEmail(authstate.User.Identity.Name);

                // var invitedUsers = new List<IdentityUser>();
                // invitedUsers.Add(currentUser);
                // invitedUsers.Add(currentUser);

                // var newEvent = new Event()
                //     {
                //         EventName = "TestEvent",
                //         CreatorName = currentUser.UserName,
                //         IdentityUsers = invitedUsers,
                //         Date = new DateTime(2024, 01,01),
                //         LocationName = "TestLocation",
                //         CordinatesLatitude = 47.264427185058594,
                //         CordinatesLongitude = 11.358067512512207,
                //         ParticipantCount = 3
                //     };

                // await eventService.AddEvent(newEvent);

                eventlist = await eventService.GetEventsFromUser(currentUser);
            }
        }
        catch(Exception ex)
        {
            throw new Exception(ex.Message);
        }
    }

    private async Task GetAllEventsAsync()
    {
        await RefreshData();
    }

    private async Task GetAllUpcomingEventsAsync()
    {
        try
        {
            eventlist = await eventService.GetAllUpcomingEvents(currentUser.UserName);
        }
        catch(Exception ex)
        {
            throw new Exception(ex.Message);
        }
    }

    private async Task GetAllPastEventsAsync()
    {
        try
        {
            eventlist = await eventService.GetAllPastEvents(currentUser.UserName);
        }
        catch(Exception ex)
        {
            throw new Exception(ex.Message);
        }
    }

    private async Task RefreshData()
    {
        try
        {
            eventlist = await eventService.GetEventsFromUser(currentUser);
        }
        catch(Exception ex)
        {
            throw new Exception(ex.Message);
        }
    }
}
